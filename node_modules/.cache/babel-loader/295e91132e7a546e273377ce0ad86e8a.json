{"ast":null,"code":"import { __rest, __assign } from './_virtual/_tslib.js';\nimport * as React from 'react';\nimport MuiAutocomplete from '@mui/material/Autocomplete';\nimport invariant from 'tiny-warning';\n\nfunction fieldToAutocomplete(_a) {\n  var disabled = _a.disabled,\n      field = _a.field,\n      _b = _a.form,\n      isSubmitting = _b.isSubmitting,\n      setFieldValue = _b.setFieldValue;\n  _a.type;\n\n  var onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      freeSolo = _a.freeSolo,\n      props = __rest(_a, [\"disabled\", \"field\", \"form\", \"type\", \"onChange\", \"onBlur\", \"freeSolo\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.multiple) {\n      invariant(Array.isArray(field.value), \"value for \" + field.name + \" is not an array, this can caused unexpected behaviour\");\n    }\n  }\n\n  field.onChange;\n  field.onBlur;\n  field.multiple;\n\n  var fieldSubselection = __rest(field, [\"onChange\", \"onBlur\", \"multiple\"]);\n\n  return __assign(__assign({\n    freeSolo: freeSolo,\n    onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (event) {\n      field.onBlur(event !== null && event !== void 0 ? event : field.name);\n    },\n    onChange: onChange !== null && onChange !== void 0 ? onChange : function (_event, value) {\n      setFieldValue(field.name, value);\n    },\n    disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting,\n    loading: isSubmitting\n  }, fieldSubselection), props);\n}\n\nfunction Autocomplete(props) {\n  return React.createElement(MuiAutocomplete, __assign({}, fieldToAutocomplete(props)));\n}\n\nAutocomplete.displayName = 'FormikMaterialUIAutocomplete';\nexport { Autocomplete, fieldToAutocomplete };","map":{"version":3,"mappings":";;;;;SAsBgBA,oBAKdC,IAcD;MAbCC,QAAQ;MACRC,KAAK;MACLC;MAAQC,YAAY;MAAEC,aAAa;EAAAL;;EAC/B,IACJM,QAAQ,cADJ;EAAA,IAEJC,MAAM,YAFF;EAAA,IAGJC,QAAQ,cAHJ;EAAA,IAIDC,KAAK,cARR,uEAQQ,CAJJ;;EAWJ,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,IAAIH,KAAK,CAACI,QAAV,EAAoB;MAClBC,SAAS,CACPC,KAAK,CAACC,OAAN,CAAcd,KAAK,CAACe,KAApB,CADO,EAEP,eAAaf,KAAK,CAACgB,IAAnB,GAAuB,wDAFhB,CAAT;IAID;EACF;;EAOGhB,KAAK,SAAL;EAAAA,KAAK,OAAL;EAAAA,KAAK,SAAL;;EAFiB,IAChBiB,iBAAiB,UAClBjB,KADkB,EAJhB,kCAIgB,CADD;;EAIrB;IACEM,QAAQ,UADV;IAEED,MAAM,EACJA,MAAM,SAAN,UAAM,WAAN,YACA,UAAUa,KAAV,EAAe;MACblB,KAAK,CAACK,MAAN,CAAaa,KAAK,SAAL,SAAK,WAAL,WAASlB,KAAK,CAACgB,IAA5B;IACD,CANL;IAOEZ,QAAQ,EACNA,QAAQ,SAAR,YAAQ,WAAR,cACA,UAAUe,MAAV,EAAkBJ,KAAlB,EAAuB;MACrBZ,aAAa,CAACH,KAAK,CAACgB,IAAP,EAAaD,KAAb,CAAb;IACD,CAXL;IAYEhB,QAAQ,EAAEA,QAAQ,SAAR,YAAQ,WAAR,cAAYG,YAZxB;IAaEkB,OAAO,EAAElB;EAbX,GAcKe,iBAdL,GAeKV,KAfL;AAiBD;;SAEec,aAKdd,OAAiE;EACjE,OAAOe,oBAACC,eAAD,EAAgBC,aAAK3B,mBAAmB,CAACU,KAAD,CAAxB,CAAhB,CAAP;AACD;;AAEDc,YAAY,CAACI,WAAb,GAA2B,8BAA3B","names":["fieldToAutocomplete","_a","disabled","field","_b","isSubmitting","setFieldValue","onChange","onBlur","freeSolo","props","process","env","NODE_ENV","multiple","invariant","Array","isArray","value","name","fieldSubselection","event","_event","loading","Autocomplete","React","MuiAutocomplete","__assign","displayName"],"sources":["C:\\Users\\Admin\\Desktop\\NameKart\\frontend\\node_modules\\formik-material-ui\\src\\Autocomplete.tsx"],"sourcesContent":["import * as React from 'react';\nimport MuiAutocomplete, {\n  AutocompleteProps as MuiAutocompleteProps,\n} from '@mui/material/Autocomplete';\nimport { FieldProps } from 'formik';\nimport invariant from 'tiny-warning';\n\nexport { AutocompleteRenderInputParams } from '@mui/material/Autocomplete';\n\nexport interface AutocompleteProps<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined\n> extends FieldProps,\n    Omit<\n      MuiAutocompleteProps<T, Multiple, DisableClearable, FreeSolo>,\n      'name' | 'value' | 'defaultValue'\n    > {\n  type?: string;\n}\n\nexport function fieldToAutocomplete<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined\n>({\n  disabled,\n  field,\n  form: { isSubmitting, setFieldValue },\n  type,\n  onChange,\n  onBlur,\n  freeSolo,\n  ...props\n}: AutocompleteProps<\n  T,\n  Multiple,\n  DisableClearable,\n  FreeSolo\n>): MuiAutocompleteProps<T, Multiple, DisableClearable, FreeSolo> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.multiple) {\n      invariant(\n        Array.isArray(field.value),\n        `value for ${field.name} is not an array, this can caused unexpected behaviour`\n      );\n    }\n  }\n\n  const {\n    onChange: _onChange,\n    onBlur: _onBlur,\n    multiple: _multiple,\n    ...fieldSubselection\n  } = field;\n\n  return {\n    freeSolo,\n    onBlur:\n      onBlur ??\n      function (event) {\n        field.onBlur(event ?? field.name);\n      },\n    onChange:\n      onChange ??\n      function (_event, value) {\n        setFieldValue(field.name, value);\n      },\n    disabled: disabled ?? isSubmitting,\n    loading: isSubmitting,\n    ...fieldSubselection,\n    ...props,\n  };\n}\n\nexport function Autocomplete<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined\n>(props: AutocompleteProps<T, Multiple, DisableClearable, FreeSolo>) {\n  return <MuiAutocomplete {...fieldToAutocomplete(props)} />;\n}\n\nAutocomplete.displayName = 'FormikMaterialUIAutocomplete';\n"]},"metadata":{},"sourceType":"module"}