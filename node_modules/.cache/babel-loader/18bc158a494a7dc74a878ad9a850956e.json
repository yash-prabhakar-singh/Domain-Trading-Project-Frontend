{"ast":null,"code":"import { AxiosContext } from \"react-axios/lib/components/AxiosProvider\";\nimport axios from 'axios';\nimport { Login } from \"@mui/icons-material\";\nconst api_url = \"http://localhost:8080\";\n\nclass AuthService {\n  signup(firstName, lastName, email, password) {\n    let usersignup = {\n      firstName: firstName,\n      lastName: lastName,\n      password: password,\n      email: email\n    };\n    return axios.post(`${api_url}/signup`, usersignup);\n  }\n\n  updateUser(ID, firstName, lastName, email) {\n    let usersignup = {\n      firstName: firstName,\n      lastName: lastName,\n      password: '',\n      email: email\n    };\n    return axios.put(`${api_url}/updateuser/${ID}`, usersignup);\n  }\n\n  login(email, password) {\n    let userlogin = {\n      email: email,\n      password: password\n    };\n    return axios.post(`${api_url}/login`, userlogin);\n  }\n\n  registerSuccess(responseData) {\n    sessionStorage.setItem(\"authUser\", JSON.stringify(responseData));\n  }\n\n  setNego(nego) {\n    sessionStorage.setItem('nego', JSON.stringify(nego));\n  }\n\n  getNego() {\n    return JSON.parse(sessionStorage.getItem('nego'));\n  }\n\n  removeNego() {\n    sessionStorage.removeItem('nego');\n  }\n\n  isNego() {\n    let nego = sessionStorage.getItem(\"nego\");\n    if (nego === null) return false;\n    return true;\n  }\n\n  getCurrentUser() {\n    return JSON.parse(sessionStorage.getItem(\"authUser\"));\n  }\n\n  getCurrentId() {\n    let user = JSON.parse(sessionStorage.getItem(\"authUser\"));\n    return user.id;\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authUser\");\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"authUser\");\n    if (user === null) return false;\n    return true;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["AxiosContext","axios","Login","api_url","AuthService","signup","firstName","lastName","email","password","usersignup","post","updateUser","ID","put","login","userlogin","registerSuccess","responseData","sessionStorage","setItem","JSON","stringify","setNego","nego","getNego","parse","getItem","removeNego","removeItem","isNego","getCurrentUser","getCurrentId","user","id","logout","isUserLoggedIn"],"sources":["C:/Users/Admin/Desktop/NameKart/frontend/src/AuthService.js"],"sourcesContent":["import { AxiosContext } from \"react-axios/lib/components/AxiosProvider\";\nimport axios from 'axios';\nimport { Login } from \"@mui/icons-material\";\n\n\nconst api_url= \"http://localhost:8080\"\n\n\nclass AuthService\n{\n\nsignup(firstName, lastName, email, password)\n{\nlet usersignup={\n    firstName : firstName,\n    lastName : lastName,\n    password : password,\n    email : email\n};\n\n\nreturn axios.post(`${api_url}/signup` ,usersignup);\n\n}\n\nupdateUser(ID,firstName, lastName, email)\n{\nlet usersignup={\n    firstName : firstName,\n    lastName : lastName,\n    password :'',\n    email : email\n    \n    \n};\n\n\nreturn axios.put(`${api_url}/updateuser/${ID}` ,usersignup);\n\n}\n\n\nlogin(email, password)\n    {\nlet userlogin={\n    email : email,\n    password : password\n}\nreturn axios.post(`${api_url}/login` ,userlogin);\n\n    }\n\nregisterSuccess(responseData)\n    {\n        sessionStorage.setItem(\"authUser\", JSON.stringify(responseData));\n    }\nsetNego(nego)\n{\n    sessionStorage.setItem('nego',JSON.stringify(nego))\n}\n\ngetNego()\n{\n    return JSON.parse(sessionStorage.getItem('nego'));\n}\n\nremoveNego()\n{\n    sessionStorage.removeItem('nego');\n}\n\nisNego() {\n    let nego = sessionStorage.getItem(\"nego\");\n    if (nego === null) return false;\n    return true;\n}\n\ngetCurrentUser()\n{\n    return JSON.parse(sessionStorage.getItem(\"authUser\"));\n}\n\ngetCurrentId()\n{\n    let user = JSON.parse(sessionStorage.getItem(\"authUser\"));\n    return user.id;\n}\n\nlogout() {\n    sessionStorage.removeItem(\"authUser\");\n}\n\n\nisUserLoggedIn() {\n    let user = sessionStorage.getItem(\"authUser\");\n    if (user === null) return false;\n    return true;\n}\n\n}\nexport default new AuthService();"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0CAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAGA,MAAMC,OAAO,GAAE,uBAAf;;AAGA,MAAMC,WAAN,CACA;EAEAC,MAAM,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,KAAtB,EAA6BC,QAA7B,EACN;IACA,IAAIC,UAAU,GAAC;MACXJ,SAAS,EAAGA,SADD;MAEXC,QAAQ,EAAGA,QAFA;MAGXE,QAAQ,EAAGA,QAHA;MAIXD,KAAK,EAAGA;IAJG,CAAf;IAQA,OAAOP,KAAK,CAACU,IAAN,CAAY,GAAER,OAAQ,SAAtB,EAAgCO,UAAhC,CAAP;EAEC;;EAEDE,UAAU,CAACC,EAAD,EAAIP,SAAJ,EAAeC,QAAf,EAAyBC,KAAzB,EACV;IACA,IAAIE,UAAU,GAAC;MACXJ,SAAS,EAAGA,SADD;MAEXC,QAAQ,EAAGA,QAFA;MAGXE,QAAQ,EAAE,EAHC;MAIXD,KAAK,EAAGA;IAJG,CAAf;IAUA,OAAOP,KAAK,CAACa,GAAN,CAAW,GAAEX,OAAQ,eAAcU,EAAG,EAAtC,EAAyCH,UAAzC,CAAP;EAEC;;EAGDK,KAAK,CAACP,KAAD,EAAQC,QAAR,EACD;IACJ,IAAIO,SAAS,GAAC;MACVR,KAAK,EAAGA,KADE;MAEVC,QAAQ,EAAGA;IAFD,CAAd;IAIA,OAAOR,KAAK,CAACU,IAAN,CAAY,GAAER,OAAQ,QAAtB,EAA+Ba,SAA/B,CAAP;EAEK;;EAELC,eAAe,CAACC,YAAD,EACX;IACIC,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCC,IAAI,CAACC,SAAL,CAAeJ,YAAf,CAAnC;EACH;;EACLK,OAAO,CAACC,IAAD,EACP;IACIL,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA8BC,IAAI,CAACC,SAAL,CAAeE,IAAf,CAA9B;EACH;;EAEDC,OAAO,GACP;IACI,OAAOJ,IAAI,CAACK,KAAL,CAAWP,cAAc,CAACQ,OAAf,CAAuB,MAAvB,CAAX,CAAP;EACH;;EAEDC,UAAU,GACV;IACIT,cAAc,CAACU,UAAf,CAA0B,MAA1B;EACH;;EAEDC,MAAM,GAAG;IACL,IAAIN,IAAI,GAAGL,cAAc,CAACQ,OAAf,CAAuB,MAAvB,CAAX;IACA,IAAIH,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;IACnB,OAAO,IAAP;EACH;;EAEDO,cAAc,GACd;IACI,OAAOV,IAAI,CAACK,KAAL,CAAWP,cAAc,CAACQ,OAAf,CAAuB,UAAvB,CAAX,CAAP;EACH;;EAEDK,YAAY,GACZ;IACI,IAAIC,IAAI,GAAGZ,IAAI,CAACK,KAAL,CAAWP,cAAc,CAACQ,OAAf,CAAuB,UAAvB,CAAX,CAAX;IACA,OAAOM,IAAI,CAACC,EAAZ;EACH;;EAEDC,MAAM,GAAG;IACLhB,cAAc,CAACU,UAAf,CAA0B,UAA1B;EACH;;EAGDO,cAAc,GAAG;IACb,IAAIH,IAAI,GAAGd,cAAc,CAACQ,OAAf,CAAuB,UAAvB,CAAX;IACA,IAAIM,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;IACnB,OAAO,IAAP;EACH;;AAxFD;;AA2FA,eAAe,IAAI7B,WAAJ,EAAf"},"metadata":{},"sourceType":"module"}