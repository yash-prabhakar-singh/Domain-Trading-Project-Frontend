import { __rest, __assign } from './_virtual/_tslib.js';
import * as React from 'react';
import MuiAutocomplete from '@mui/material/Autocomplete';
import invariant from 'tiny-warning';

function fieldToAutocomplete(_a) {
    var disabled = _a.disabled, field = _a.field, _b = _a.form, isSubmitting = _b.isSubmitting, setFieldValue = _b.setFieldValue; _a.type; var onChange = _a.onChange, onBlur = _a.onBlur, freeSolo = _a.freeSolo, props = __rest(_a, ["disabled", "field", "form", "type", "onChange", "onBlur", "freeSolo"]);
    if (process.env.NODE_ENV !== 'production') {
        if (props.multiple) {
            invariant(Array.isArray(field.value), "value for " + field.name + " is not an array, this can caused unexpected behaviour");
        }
    }
    field.onChange; field.onBlur; field.multiple; var fieldSubselection = __rest(field, ["onChange", "onBlur", "multiple"]);
    return __assign(__assign({ freeSolo: freeSolo, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (event) {
            field.onBlur(event !== null && event !== void 0 ? event : field.name);
        }, onChange: onChange !== null && onChange !== void 0 ? onChange : function (_event, value) {
            setFieldValue(field.name, value);
        }, disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, loading: isSubmitting }, fieldSubselection), props);
}
function Autocomplete(props) {
    return React.createElement(MuiAutocomplete, __assign({}, fieldToAutocomplete(props)));
}
Autocomplete.displayName = 'FormikMaterialUIAutocomplete';

export { Autocomplete, fieldToAutocomplete };
//# sourceMappingURL=Autocomplete.js.map
