'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var MuiAutocomplete = require('@mui/material/Autocomplete');
var invariant = require('tiny-warning');
var MuiCheckbox = require('@mui/material/Checkbox');
var FormControlLabel = require('@mui/material/FormControlLabel');
var MuiInputBase = require('@mui/material/InputBase');
var MuiRadioGroup = require('@mui/material/RadioGroup');
var FormControl = require('@mui/material/FormControl');
var FormHelperText = require('@mui/material/FormHelperText');
var InputLabel = require('@mui/material/InputLabel');
var MuiSelect = require('@mui/material/Select');
var formik = require('formik');
var Input = require('@mui/material/Input');
var MuiSwitch = require('@mui/material/Switch');
var MuiTextField = require('@mui/material/TextField');
var MuiToggleButtonGroup = require('@mui/material/ToggleButtonGroup');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var MuiAutocomplete__default = /*#__PURE__*/_interopDefaultLegacy(MuiAutocomplete);
var invariant__default = /*#__PURE__*/_interopDefaultLegacy(invariant);
var MuiCheckbox__default = /*#__PURE__*/_interopDefaultLegacy(MuiCheckbox);
var FormControlLabel__default = /*#__PURE__*/_interopDefaultLegacy(FormControlLabel);
var MuiInputBase__default = /*#__PURE__*/_interopDefaultLegacy(MuiInputBase);
var MuiRadioGroup__default = /*#__PURE__*/_interopDefaultLegacy(MuiRadioGroup);
var FormControl__default = /*#__PURE__*/_interopDefaultLegacy(FormControl);
var FormHelperText__default = /*#__PURE__*/_interopDefaultLegacy(FormHelperText);
var InputLabel__default = /*#__PURE__*/_interopDefaultLegacy(InputLabel);
var MuiSelect__default = /*#__PURE__*/_interopDefaultLegacy(MuiSelect);
var Input__default = /*#__PURE__*/_interopDefaultLegacy(Input);
var MuiSwitch__default = /*#__PURE__*/_interopDefaultLegacy(MuiSwitch);
var MuiTextField__default = /*#__PURE__*/_interopDefaultLegacy(MuiTextField);
var MuiToggleButtonGroup__default = /*#__PURE__*/_interopDefaultLegacy(MuiToggleButtonGroup);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function fieldToAutocomplete(_a) {
    var disabled = _a.disabled, field = _a.field, _b = _a.form, isSubmitting = _b.isSubmitting, setFieldValue = _b.setFieldValue; _a.type; var onChange = _a.onChange, onBlur = _a.onBlur, freeSolo = _a.freeSolo, props = __rest(_a, ["disabled", "field", "form", "type", "onChange", "onBlur", "freeSolo"]);
    if (process.env.NODE_ENV !== 'production') {
        if (props.multiple) {
            invariant__default["default"](Array.isArray(field.value), "value for " + field.name + " is not an array, this can caused unexpected behaviour");
        }
    }
    field.onChange; field.onBlur; field.multiple; var fieldSubselection = __rest(field, ["onChange", "onBlur", "multiple"]);
    return __assign(__assign({ freeSolo: freeSolo, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (event) {
            field.onBlur(event !== null && event !== void 0 ? event : field.name);
        }, onChange: onChange !== null && onChange !== void 0 ? onChange : function (_event, value) {
            setFieldValue(field.name, value);
        }, disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, loading: isSubmitting }, fieldSubselection), props);
}
function Autocomplete(props) {
    return React__namespace.createElement(MuiAutocomplete__default["default"], __assign({}, fieldToAutocomplete(props)));
}
Autocomplete.displayName = 'FormikMaterialUIAutocomplete';

function fieldToCheckbox(_a) {
    var disabled = _a.disabled, _b = _a.field, fieldOnBlur = _b.onBlur, field = __rest(_b, ["onBlur"]), isSubmitting = _a.form.isSubmitting, type = _a.type, onBlur = _a.onBlur, props = __rest(_a, ["disabled", "field", "form", "type", "onBlur"]);
    var indeterminate = !Array.isArray(field.value) && field.value == null;
    if (process.env.NODE_ENV !== 'production') {
        invariant__default["default"](type === 'checkbox', "property type=checkbox is missing from field " + field.name + ", this can caused unexpected behaviour");
    }
    return __assign(__assign({ disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, indeterminate: indeterminate, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (e) {
            fieldOnBlur(e !== null && e !== void 0 ? e : field.name);
        } }, field), props);
}
function Checkbox(props) {
    return React__namespace.createElement(MuiCheckbox__default["default"], __assign({}, fieldToCheckbox(props)));
}
Checkbox.displayName = 'FormikMaterialUICheckbox';

function CheckboxWithLabel(_a) {
    var Label = _a.Label, props = __rest(_a, ["Label"]);
    return (React__namespace.createElement(FormControlLabel__default["default"], __assign({ control: React__namespace.createElement(MuiCheckbox__default["default"], __assign({}, fieldToCheckbox(props))) }, Label)));
}
CheckboxWithLabel.displayName = 'FormikMaterialUICheckboxWithLabel';

function fieldToInputBase(_a) {
    var disabled = _a.disabled, _b = _a.field, fieldOnBlur = _b.onBlur, field = __rest(_b, ["onBlur"]), isSubmitting = _a.form.isSubmitting, onBlur = _a.onBlur, props = __rest(_a, ["disabled", "field", "form", "onBlur"]);
    return __assign(__assign({ disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (e) {
            fieldOnBlur(e !== null && e !== void 0 ? e : field.name);
        } }, field), props);
}
function InputBase(props) {
    return React__namespace.createElement(MuiInputBase__default["default"], __assign({}, fieldToInputBase(props)));
}
InputBase.displayName = 'FormikMaterialUIInputBase';

function fieldToRadioGroup(_a) {
    var _b = _a.field, fieldOnBlur = _b.onBlur, field = __rest(_b, ["onBlur"]); _a.form; var onBlur = _a.onBlur, props = __rest(_a, ["field", "form", "onBlur"]);
    return __assign(__assign({ onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (e) {
            fieldOnBlur(e !== null && e !== void 0 ? e : field.name);
        } }, field), props);
}
function RadioGroup(props) {
    return React__namespace.createElement(MuiRadioGroup__default["default"], __assign({}, fieldToRadioGroup(props)));
}
RadioGroup.displayName = 'FormikMaterialUIRadioGroup';

function fieldToSelect(_a) {
    var _this = this;
    var disabled = _a.disabled, _b = _a.field; _b.onBlur; var fieldOnChange = _b.onChange, field = __rest(_b, ["onBlur", "onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldTouched = _c.setFieldTouched, setFieldValue = _c.setFieldValue, onClose = _a.onClose, props = __rest(_a, ["disabled", "field", "form", "onClose"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, error: showError, formError: showError ? fieldError : undefined, onBlur: function () {
        }, onChange: fieldOnChange !== null && fieldOnChange !== void 0 ? fieldOnChange : (function () {
        }), onClose: onClose !== null && onClose !== void 0 ? onClose : (function (e) { return __awaiter(_this, void 0, void 0, function () {
            var dataset;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataset = e.target.dataset;
                        if (!(dataset && dataset.value)) return [3, 2];
                        return [4, setFieldValue(field.name, dataset.value, false)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        setFieldTouched(field.name, true, true);
                        return [2];
                }
            });
        }); }) }, field), props);
}
function Select(_a) {
    var formControl = _a.formControl, inputLabel = _a.inputLabel, formHelperText = _a.formHelperText, selectProps = __rest(_a, ["formControl", "inputLabel", "formHelperText"]);
    var _b = fieldToSelect(selectProps), error = _b.error, formError = _b.formError, disabled = _b.disabled, selectFieldProps = __rest(_b, ["error", "formError", "disabled"]);
    var _c = formHelperText || {}, formHelperTextChildren = _c.children, formHelperTextProps = __rest(_c, ["children"]);
    var shouldDisplayFormHelperText = error || formHelperTextChildren;
    return (React__namespace.createElement(FormControl__default["default"], __assign({ disabled: disabled, error: error }, formControl),
        React__namespace.createElement(InputLabel__default["default"], __assign({ id: selectFieldProps.labelId }, inputLabel), selectFieldProps.label),
        React__namespace.createElement(MuiSelect__default["default"], __assign({}, selectFieldProps)),
        shouldDisplayFormHelperText && (React__namespace.createElement(FormHelperText__default["default"], __assign({}, formHelperTextProps), error ? formError : formHelperTextChildren))));
}
Select.displayName = 'FormikMaterialUISelect';

var SimpleFileUpload = function (_a) {
    var field = _a.field, _b = _a.form, isSubmitting = _b.isSubmitting, touched = _b.touched, errors = _b.errors, setFieldValue = _b.setFieldValue, label = _a.label, accept = _a.accept, _c = _a.disabled, disabled = _c === void 0 ? false : _c, inputProps = _a.InputProps, inputLabelProps = _a.InputLabelProps, formControlProps = _a.FormControlProps;
    var error = formik.getIn(touched, field.name) && formik.getIn(errors, field.name);
    return (React__namespace.createElement(FormControl__default["default"], __assign({}, formControlProps),
        label && (React__namespace.createElement(InputLabel__default["default"], __assign({ shrink: true, error: !!error }, inputLabelProps), label)),
        React__namespace.createElement(Input__default["default"], __assign({ error: !!error, inputProps: {
                type: 'file',
                accept: accept,
                disabled: disabled || isSubmitting,
                name: field.name,
                onChange: function (event) {
                    if (inputProps === null || inputProps === void 0 ? void 0 : inputProps.onChange) {
                        inputProps.onChange(event);
                    }
                    else {
                        var file = event.currentTarget.files[0];
                        setFieldValue(field.name, file);
                    }
                },
            } }, inputProps)),
        error && React__namespace.createElement(FormHelperText__default["default"], { error: true }, error)));
};

function fieldToSwitch(_a) {
    var disabled = _a.disabled, _b = _a.field, fieldOnBlur = _b.onBlur, field = __rest(_b, ["onBlur"]), isSubmitting = _a.form.isSubmitting, type = _a.type, onBlur = _a.onBlur, props = __rest(_a, ["disabled", "field", "form", "type", "onBlur"]);
    if (process.env.NODE_ENV !== 'production') {
        invariant__default["default"](type === 'checkbox', "property type=checkbox is missing from field " + field.name + ", this can caused unexpected behaviour");
    }
    return __assign(__assign({ disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (e) {
            fieldOnBlur(e !== null && e !== void 0 ? e : field.name);
        } }, field), props);
}
function Switch(props) {
    return React__namespace.createElement(MuiSwitch__default["default"], __assign({}, fieldToSwitch(props)));
}
Switch.displayName = 'FormikMaterialUISwitch';

function fieldToTextField(_a) {
    var disabled = _a.disabled, _b = _a.field, fieldOnBlur = _b.onBlur, field = __rest(_b, ["onBlur"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, onBlur = _a.onBlur, helperText = _a.helperText, props = __rest(_a, ["disabled", "field", "form", "onBlur", "helperText"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ error: showError, helperText: showError ? fieldError : helperText, disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (e) {
            fieldOnBlur(e !== null && e !== void 0 ? e : field.name);
        } }, field), props);
}
function TextField(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return React__namespace.createElement(MuiTextField__default["default"], __assign({}, fieldToTextField(props)), children);
}
TextField.displayName = 'FormikMaterialUITextField';

function fieldToToggleButtonGroup(_a) {
    var _b = _a.field; _b.onChange; var fieldOnBlur = _b.onBlur, field = __rest(_b, ["onChange", "onBlur"]), type = _a.type, onChange = _a.onChange, onBlur = _a.onBlur, form = _a.form, props = __rest(_a, ["field", "type", "onChange", "onBlur", "form"]);
    if (process.env.NODE_ENV !== 'production') {
        invariant__default["default"](type === 'checkbox', "property type=checkbox is missing from field " + field.name + ", this can caused unexpected behaviour");
        if (!props.exclusive) {
            invariant__default["default"](Array.isArray(field.value), "value for " + field.name + " is not an array, this can caused unexpected behaviour");
        }
    }
    return __assign(__assign({ onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
            fieldOnBlur(field.name);
        }, onChange: onChange !== null && onChange !== void 0 ? onChange : function (_event, newValue) {
            form.setFieldValue(field.name, newValue);
        } }, field), props);
}
function ToggleButtonGroup(props) {
    return React__namespace.createElement(MuiToggleButtonGroup__default["default"], __assign({}, fieldToToggleButtonGroup(props)));
}
ToggleButtonGroup.displayName = 'FormikMaterialUIToggleButtonGroup';

exports.Autocomplete = Autocomplete;
exports.Checkbox = Checkbox;
exports.CheckboxWithLabel = CheckboxWithLabel;
exports.InputBase = InputBase;
exports.RadioGroup = RadioGroup;
exports.Select = Select;
exports.SimpleFileUpload = SimpleFileUpload;
exports.Switch = Switch;
exports.TextField = TextField;
exports.ToggleButtonGroup = ToggleButtonGroup;
exports.fieldToAutocomplete = fieldToAutocomplete;
exports.fieldToCheckbox = fieldToCheckbox;
exports.fieldToInputBase = fieldToInputBase;
exports.fieldToRadioGroup = fieldToRadioGroup;
exports.fieldToSelect = fieldToSelect;
exports.fieldToSwitch = fieldToSwitch;
exports.fieldToTextField = fieldToTextField;
exports.fieldToToggleButtonGroup = fieldToToggleButtonGroup;
//# sourceMappingURL=main.js.map
